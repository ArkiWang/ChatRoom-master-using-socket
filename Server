
import java.io.*;
import java.net.*;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import java.sql.*;
/**
 * Created by yueli on 2018/4/20.
 */

public class Server {
    /*TCP part*/
    private ServerSocket serverSocket;
    private int TCP_port = 8000;
    private ExecutorService TCPService;
    /*UDP part*/
    private DatagramSocket serverDS;
    private int UDP_port = 56788;
    private final int Udp_user=9999;
    private ExecutorService UDPService;
    private final int POOL_SIZE = 4;
    private Connection con;
    private PreparedStatement stmt;
    private ResultSet rs;

    public Server() throws Exception{
        //加载驱动器
        Class.forName("com.mysql.jdbc.Driver");
        String url="jdbc:mysql://localhost:3306/ChatRoom";
        String user="***";
        String password="***";
        con=DriverManager.getConnection(url+"?useSSL=false",user,password);
        serverSocket = new ServerSocket(TCP_port);
        TCPService = Executors.newFixedThreadPool(
                Runtime.getRuntime().availableProcessors() * POOL_SIZE);
        serverDS=new DatagramSocket(UDP_port);
        UDPService=Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()*POOL_SIZE);
    }

    public void TCPService() throws IOException {//向服务器发Tcp
        while (true) {
            Socket socket = null;
            socket = serverSocket.accept();
            TCPService.execute(new TCPHandler(socket));
        }
    }

    public void UDPService() throws IOException {//UDP服务群聊
        while (true) {
            DatagramPacket receivePacket = new DatagramPacket(new byte[1024], 1024);
            serverDS.receive(receivePacket);
            UDPService.execute(new UDPHandler(receivePacket));
        }
    }
    public String getFriendIP(String userName) throws SQLException {
        String ip=null;
        String sql = "select name from users where userName='" + userName+"'";
        stmt = con.prepareStatement(sql);
        rs = stmt.executeQuery();
        rs.next();
        ip=rs.getString("IP");
        return ip;
    }
    public static void main(String[] args) throws Exception {
        Server server=new Server();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    server.TCPService();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }).start();
       new Thread(new Runnable() {
           @Override
           public void run() {
               try {
                   server.UDPService();
               } catch (IOException e) {
                   e.printStackTrace();
               }
           }
       }).start();

    }

    class TCPHandler implements Runnable {
        private Socket socket;
        private PrintWriter pw;
        private BufferedReader br;
        private String user;

        public TCPHandler(Socket socket) throws IOException {
            this.socket = socket;
            this.pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))
                    , true);
            this.br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            System.out.println("my ip:"+socket.getLocalAddress());
            System.out.println("remote ip:"+socket.getInetAddress());
        }
        public void getData(String table ,String user,ArrayList<String>data) throws SQLException {
            String sql = "select * from "+table+" where userName='" + user+"'";
            stmt = con.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()){
                data.add(rs.getString(3));
            }
        }
        public void sendData(String user) throws SQLException, IOException {
            ArrayList<String>Friends=new ArrayList<>();
            ArrayList<String>Groups=new ArrayList<>();
            getData("userfriend",user,Friends);
            getData("usergroup",user,Groups);
            ObjectOutputStream oos=new ObjectOutputStream(socket.getOutputStream());
            oos.writeObject(Friends);
            oos.writeObject(Groups);
        }
        @Override
        public void run() {
            try {
                String line=null;
                while((line= br.readLine())!=null)  {
                    if(line!=null) {
                        String[] msg = line.split("-");
                        //Login-user-password-ip

                        for(int i=0;i<msg.length;i++){
                            System.out.println(msg[i]);
                        }
                        if (msg[0].equals("Login")) {
                            String sql = "select * from users where userName='" + msg[1]+"'";
                            stmt = con.prepareStatement(sql);
                            rs = stmt.executeQuery();
                            user=msg[1];
                            if(rs.next()) {
                                if (msg[2].equals(rs.getString("password"))&&rs.getString("state").equals("offline")) {
                                    sql = "UPDATE users SET IP='" + socket.getInetAddress() +"'"+ ",state='online'" + "Where userName='" + msg[1]+"'";
                                    stmt = con.prepareStatement(sql);
                                    stmt.executeUpdate();
                                    pw.println("Login succeed!");
                                    System.out.println("Login succeed!");
                                    sendData(msg[1]);
                                }else if (!msg[2].equals(rs.getString("password"))){
                                    pw.println("Wrong Password!");
                                }else {
                                    pw.println("Already Login!");
                                }
                            }
                        } else if (msg[0].equals("Logoff")) {
                            String sql = "UPDATE users SET IP='" + msg[3] + "',state='offline'" + "Where userName='" + msg[1]+"'";
                            stmt = con.prepareStatement(sql);
                            stmt.executeUpdate();
                            socket.close();
                        } else if (msg[0].equals("Register")) {//
                            String sql = "select * from users where userName='" + msg[1]+"'";
                            stmt = con.prepareStatement(sql);
                            rs = stmt.executeQuery();
                            if(rs.next()){
                                pw.println("ID already registered!");
                            }else{
                                sql="INSERT INTO users(userName,password,state,IP)VALUES" +
                                        " ('"+msg[1]+"','"+msg[2]+"','online','"+socket.getInetAddress().toString()+"')";
                                stmt = con.prepareStatement(sql);
                                stmt.executeUpdate();
                            }
                        }else if(msg[0].equals("ADDF")){
                             String sql;
                             sql="SELECT * FROM userfriend WHERE userName='"+user+"'"+
                                     "friendName='"+msg[1]+"'";
                            stmt = con.prepareStatement(sql);
                            rs = stmt.executeQuery();
                            if(rs.next()){
                                pw.println("Already has this friend");
                                System.out.println("Already has this friend");
                            }else {

                                sql = "INSERT INTO userfriend(userName,friendName)VALUES" +
                                        " ('" + user + "','" + msg[1] + "')";
                                stmt = con.prepareStatement(sql);
                                stmt.executeUpdate();
                                sql = "INSERT INTO userfriend(userName,friendName)VALUES" +
                                        " ('" + msg[1] + "','" + user + "')";
                                stmt = con.prepareStatement(sql);
                                stmt.executeUpdate();
                                sendData(user);
                                pw.println("Add friend Succeed");
                            }
                        }else if(msg[0].equals("ADDG")){
                            String sql="INSERT INTO usergroup(userName,groupName)VALUES" +
                                    " ('"+user+"','"+msg[1]+"')";
                            stmt = con.prepareStatement(sql);
                            stmt.executeUpdate();
                            sendData(user);
                        }else if(msg[0].equals("CreateGroup")){
                            String sql="INSERT INTO groups(groupName)VALUES" +
                                    " ('"+msg[1]+"')";
                            stmt = con.prepareStatement(sql);
                            stmt.executeUpdate();
                            sql="INSERT INTO usergroup(userName,groupName)VALUES" +
                                    " ('"+user+"','"+msg[1]+"')";
                            stmt = con.prepareStatement(sql);
                            stmt.executeUpdate();
                            sendData(user);
                        }
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            } catch (SQLException e) {
                e.printStackTrace();
            }finally {
                if (socket!=null){
                    try {
                        socket.close();
                        String sql = "UPDATE users SET state='offline'" + "Where userName='" + user+"'";
                        stmt = con.prepareStatement(sql);
                        stmt.executeUpdate();
                    } catch (IOException e) {
                        e.printStackTrace();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    class UDPHandler implements Runnable {
        //private DatagramPacket sendPacket;
        private int groupPort;
        private DatagramPacket receivePacket;
        private DatagramSocket socket;
        public UDPHandler(DatagramPacket receiveDP)throws IOException{
            receivePacket=receiveDP;
            socket=new DatagramSocket();
            //sendPacket=new DatagramPacket(new byte[1024],1024,receiveDP.getSocketAddress());
        }
        public  Vector<InetAddress>  getOnlineIP(int group){//
            int n=10;
            return new  Vector<InetAddress>();
        }
        public String getFriendIP(String friend)throws  Exception{
            String sql = "select * from users where userName='" + friend+"'";
            stmt = con.prepareStatement(sql);
            rs = stmt.executeQuery();
            rs.next();
            if(rs.getString("state").equals("online")){
                return  rs.getString("IP");
            }
            return  null;
        }
        @Override
        public void run() {
            String msg=new String(receivePacket.getData(),0,receivePacket.getLength());
            System.out.println(receivePacket.getAddress()+">"+msg);
            String[] str=msg.split("-");
            System.out.println("receive from "+str[4]+" msg:"+str[5]+" IP:"+receivePacket.getAddress().getHostAddress()
                    +"port:"+receivePacket.getPort());
            String echoIP=receivePacket.getAddress().toString();
            echoIP=echoIP.substring(1);
            DatagramPacket sendPacket = null;//Client Listener port
            try {
                sendPacket = new DatagramPacket(msg.getBytes(),
                        msg.length(), InetAddress.getByName(echoIP), Udp_user);
                socket.send(sendPacket);
            } catch (UnknownHostException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
            System.out.println("Echo back:>"+echoIP+":"+Udp_user);
            //Friend-to-xxx-from-xxx-msg
            if(str[0].equals("Friend")){
                try {
                    sendToFriend(str[2],msg);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }else if(str[0].equals("Group")){
                //Group-toGroup-xxx-from-xxx-msg
                try {
                    sendToGroup(str[2],msg);
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (SQLException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
        public void sendToFriend(String friend,String msg) throws Exception {
            String fIP=null;
            if((fIP=getFriendIP(friend))!=null) {
                fIP=fIP.substring(1);
                DatagramPacket sendPacket = new DatagramPacket(msg.getBytes(),
                        msg.length(), InetAddress.getByName(fIP), Udp_user);//Client Listener port
                socket.send(sendPacket);
                System.out.println("send to:"+fIP+">"+msg);
            }
        }
        public void sendToGroup(String group,String msg) throws Exception {
            String sql = "select * from usergroup where groupName='" + group+"'";
            stmt = con.prepareStatement(sql);
            rs = stmt.executeQuery();
            while (rs.next()){
                sendToFriend(getFriendIP(rs.getString("userName")),msg);
            }
        }
    }
}
